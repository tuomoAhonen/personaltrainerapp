{"version":3,"sources":["components/Header.js","components/AddCustomer.js","components/AddTrainingForCustomer.js","components/Customers.js","components/Trainings.js","components/Calendar.js","components/Navigation.js","App.js","reportWebVitals.js","index.js"],"names":["Header","AppBar","position","style","marginBottom","background","boxShadow","Toolbar","Typography","variant","AddCustomer","props","useState","open","setOpen","firstname","lastname","streetaddress","postcode","city","email","phone","customer","setCustomer","inputChanged","event","target","name","value","handleClose","Fragment","Button","className","onClick","size","border","Dialog","onClose","DialogTitle","DialogContent","TextField","label","onChange","margin","fullWidth","DialogActions","addCustomer","AddTrainingForCustomer","date","activity","duration","links","href","training","setTraining","acitvity","menuItems","i","length","push","MenuItem","minWidth","minHeight","maxWidth","maxHeight","marginLeft","Select","type","addTrainingForCustomer","Customers","customers","setCustomers","message","setMessage","gridApi","setGridApi","fetchCustomers","fetch","then","response","json","data","content","catch","err","console","error","useEffect","method","headers","body","JSON","stringify","ok","alert","editWithCell","params","url","editCustomer","columnStyle","columns","headerName","field","width","cellStyle","cellRendererFramework","window","confirm","color","textTransform","sortable","sort","sortIndex","filter","editable","valueSetter","newValue","exportDataAsCsv","height","rowData","rowHeight","columnDefs","pagination","paginationPageSize","suppressCellSelection","onGridReady","api","Snackbar","autoHideDuration","Trainings","trainings","setTrainings","fetchTrainings","editTraining","id","log","Date","toLocaleDateString","Calendar","trainingsCustom","start","title","plugins","dayGridPlugin","timeGridPlugin","initialView","headerToolbar","left","center","right","timeZone","events","Navigation","setValue","Box","sx","flexGrow","display","TabContext","TabList","orientation","marginRight","textColor","indicatorColor","Tab","icon","Group","iconPosition","FitnessCenter","TabPanel","marginTop","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAEe,SAASA,IACpB,OACQ,cAACC,EAAA,EAAD,CAAQC,SAAS,SACbC,MAAO,CACHC,aAAc,GACdC,WAAY,iEACZC,UAAW,yBAJnB,SAMI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,gD,+KCPL,SAASC,EAAYC,GAChC,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,mBAAS,CACrCG,UAAW,GACXC,SAAU,GACVC,cAAe,GACfC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,MAAO,KAPX,mBAAOC,EAAP,KAAiBC,EAAjB,KAUMC,EAAe,SAACC,GAClBF,EAAY,2BAAID,GAAL,kBAAgBG,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAO1DC,EAAc,WAChBf,GAAQ,IAQZ,OACI,eAAC,IAAMgB,SAAP,WACI,cAACC,EAAA,EAAD,CACIC,UAAU,QACVC,QAjBY,WACpBnB,GAAQ,IAiBAoB,KAAK,SACLzB,QAAQ,WACRN,MAAO,CACHE,WAAY,gEACZC,UAAW,wBACXF,aAAc,GACd+B,OAAQ,GAThB,8BAYA,eAACC,EAAA,EAAD,CAAQvB,KAAMA,EAAMwB,QAASR,EAA7B,UACA,cAACS,EAAA,EAAD,2BACA,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACAC,MAAM,YACNd,KAAK,YACLC,MAAON,EAASP,UAChB2B,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,IAET,cAACJ,EAAA,EAAD,CACAC,MAAM,WACNd,KAAK,WACLC,MAAON,EAASN,SAChB0B,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,IAET,cAACJ,EAAA,EAAD,CACAC,MAAM,UACNd,KAAK,gBACLC,MAAON,EAASL,cAChByB,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,IAET,cAACJ,EAAA,EAAD,CACAC,MAAM,WACNd,KAAK,WACLC,MAAON,EAASJ,SAChBwB,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,IAET,cAACJ,EAAA,EAAD,CACAC,MAAM,OACNd,KAAK,OACLC,MAAON,EAASH,KAChBuB,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,IAET,cAACJ,EAAA,EAAD,CACAC,MAAM,QACNd,KAAK,QACLC,MAAON,EAASF,MAChBsB,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,IAET,cAACJ,EAAA,EAAD,CACAC,MAAM,QACNd,KAAK,QACLC,MAAON,EAASD,MAChBqB,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,OAGb,eAACC,EAAA,EAAD,WACI,cAACd,EAAA,EAAD,CAAQE,QAvFD,WACftB,EAAMmC,YAAYxB,GAClBO,KAqFQ,kBACA,cAACE,EAAA,EAAD,CAAQE,QAASJ,EAAjB,6B,sBChHD,SAASkB,EAAuBpC,GAqB3C,IApBA,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAiCF,mBAAS,CACtCoC,KAAM,GACNC,SAAU,GACVC,SAAU,GACV5B,SAAUX,EAAMW,SAAS6B,MAAM,GAAGC,OAJtC,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,EAAmB1C,mBAAS,CACxB,UACA,UACA,SACA,UACA,eACA,mBACA,WACA,UARG2C,EAAP,oBAWMC,EAAY,GAETC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IACjCD,EAAUG,KAAK,cAACC,EAAA,EAAD,CAAkBhC,MAAO2B,EAASE,GAAlC,SAAuCF,EAASE,IAAjCA,IAGlC,IAAMjC,EAAe,SAACC,GAClB6B,EAAY,2BAAID,GAAL,kBAAgB5B,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAO1DC,EAAc,WAChBf,GAAQ,IAQZ,OACI,eAAC,IAAMgB,SAAP,WACI,cAACC,EAAA,EAAD,CACIE,QAhBY,WACpBnB,GAAQ,IAgBAoB,KAAK,QACLzB,QAAQ,WACRN,MAAO,CACHE,WAAY,mDACZC,UAAW,wBACX6B,OAAQ,EACR0B,SAAU,OACVC,UAAW,OACXC,SAAU,OACVC,UAAW,OACXC,WAAY,QAZpB,eAiBA,eAAC7B,EAAA,EAAD,CAAQvB,KAAMA,EAAMwB,QAASR,EAA7B,UACA,cAACS,EAAA,EAAD,gDACA,eAACC,EAAA,EAAD,WACI,cAAC2B,EAAA,EAAD,CACIzB,MAAM,WACNd,KAAK,WACLC,MAAOyB,EAASJ,SAChBP,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,EAPb,SASKY,IAcL,cAAChB,EAAA,EAAD,CACIb,KAAK,OACLC,MAAOyB,EAASL,KAChBmB,KAAK,iBACLzB,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,IAEb,cAACJ,EAAA,EAAD,CACIC,MAAM,qBACNd,KAAK,WACLC,MAAOyB,EAASH,SAChBR,SAAUlB,EACVf,QAAQ,WACRkC,OAAO,QACPC,WAAS,OAGjB,eAACC,EAAA,EAAD,WACI,cAACd,EAAA,EAAD,CAAQE,QAtED,WACftB,EAAMyD,uBAAuBf,GAC7BxB,KAoEQ,kBACA,cAACE,EAAA,EAAD,CAAQE,QAASJ,EAAjB,6BCvGD,SAASwC,IACpB,MAAkCzD,mBAAS,IAA3C,mBAAO0D,EAAP,KAAkBC,EAAlB,KACA,EAA8B3D,mBAAS,IAAvC,mBAAO4D,EAAP,KAAgBC,EAAhB,KACA,EAAwB7D,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,MAAvC,mBAAO8D,EAAP,KAAgBC,EAAhB,KAEMC,EAAiB,WACnBC,MAAM,oDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIV,EAAaU,EAAKC,YAC/BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAGhCG,qBAAU,WACNX,MACD,IAEH,IAkBMR,EAAyB,SAACf,GAC5BwB,MAAM,mDAAoD,CACtDW,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUvC,KAExByB,MAAK,SAAAC,GACCA,EAASc,IACRpB,EAAW,qDACX3D,GAAQ,IAERgF,MAAM,2CAGbX,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OA0C1BW,EAAe,SAACC,IAvCD,SAAC1E,EAAU2E,GAC5BpB,MAAMoB,EAAK,CACPT,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUtE,KAExBwD,MAAK,SAAAC,GACCA,EAASc,IACRjB,IACAH,EAAW,uBACX3D,GAAQ,IAERgF,MAAM,oCAGbX,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAkC5Bc,CATiB,CACbnF,UAAWiF,EAAOf,KAAKlE,UACvBC,SAAUgF,EAAOf,KAAKjE,SACtBC,cAAe+E,EAAOf,KAAKhE,cAC3BC,SAAU8E,EAAOf,KAAK/D,SACtBC,KAAM6E,EAAOf,KAAK9D,KAClBC,MAAO4E,EAAOf,KAAK7D,MACnBC,MAAO2E,EAAOf,KAAK5D,OAEA2E,EAAOf,KAAK9B,MAAM,GAAGC,OAW1C+C,EAAc,CAChB,eAAgB,cAGdC,EAAU,CACZ,CACIC,WAAY,GACZC,MAAO,eACPC,MAAO,GACPC,UAAWL,EACXM,sBAAuB,SAAAT,GAAM,OAC7B,cAACjD,EAAD,CACIqB,uBAAwBA,EACxB9C,SAAU0E,EAAOf,SAgBzB,CACIoB,WAAY,GACZC,MAAO,eACPC,MAAO,GACPC,UAAWL,EACXM,sBAAuB,SAAAT,GAAM,OAC7B,cAACjE,EAAA,EAAD,CACIE,QAAS,kBA9EGgE,EA8EkBD,EAAOpE,WA7E1C8E,OAAOC,QAAQ,kBACd9B,MAAMoB,EAAK,CAACT,OAAQ,WACnBV,MAAK,SAAAC,GACCA,EAASc,IACRjB,IACAH,EAAW,qCACX3D,GAAQ,IAORgF,MAAM,oCAGbX,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAjBb,IAACa,GA+EZ/D,KAAK,QACL0E,MAAM,QACNzG,MAAO,CACHE,WAAY,mDACZC,UAAW,wBACXuD,SAAU,OACVC,UAAW,OACXC,SAAU,OACVC,UAAW,OACXC,WAAY,OACZ4C,cAAe,aAZvB,iBAgBJ,CACIP,MAAO,YACPQ,UAAU,EACVC,KAAM,MACNC,UAAW,EACXC,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAKlE,UAAYiF,EAAOoB,SAC/BrB,EAAaC,KAwBrB,CACIM,MAAO,WACPQ,UAAU,EACVC,KAAM,MACNC,UAAW,EACXC,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAKjE,SAAWgF,EAAOoB,SAC9BrB,EAAaC,KAGrB,CACIM,MAAO,QACPQ,UAAU,EACVG,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPE,sBAAuB,SAAAT,GAAM,MAC7B,IAAIA,EAAOpE,OACX4E,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAK5D,MAAQ2E,EAAOoB,SAC3BrB,EAAaC,KAGrB,CACIM,MAAO,QACPQ,UAAU,EACVG,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAK7D,MAAQ4E,EAAOoB,SAC3BrB,EAAaC,KAGrB,CACIM,MAAO,gBACPQ,UAAU,EACVG,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAKhE,cAAgB+E,EAAOoB,SACnCrB,EAAaC,KAGrB,CACIM,MAAO,WACPQ,UAAU,EACVG,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAK/D,SAAW8E,EAAOoB,SAC9BrB,EAAaC,KAGrB,CACIM,MAAO,OACPQ,UAAU,EACVG,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPY,YAAa,SAAAnB,GACTA,EAAOf,KAAK9D,KAAO6E,EAAOoB,SAC1BrB,EAAaC,MAKzB,OACI,eAAC,IAAMlE,SAAP,WACI,cAACpB,EAAD,CAAaoC,YApQD,SAACxB,GACjBuD,MAAM,mDAAoD,CACtDW,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUtE,KAExBwD,MAAK,SAAAC,GACCA,EAASc,IACRjB,IACAH,EAAW,wCACX3D,GAAQ,IAERgF,MAAM,2CAGbX,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,SAsPxB,cAACrD,EAAA,EAAD,CACIC,UAAU,QACVC,QAAS,WA3KjByC,EAAQ2C,mBA4KAnF,KAAK,SACLzB,QAAQ,WACRN,MAAO,CACHE,WAAY,gEACZC,UAAW,wBACXF,aAAc,GACd+B,OAAQ,EACR8B,WAAY,IAVpB,gCAaA,qBACIjC,UAAU,uBACV7B,MAAO,CACHmH,OAAQ,IACRf,MAAO,OACP5D,OAAQ,OACRrC,UAAW,yBANnB,SASA,cAAC,cAAD,CACIiH,QAASjD,EACTkD,UAAW,GACXC,WAAYrB,EACZsB,YAAY,EACZC,mBAAoB,GACpBC,uBAAuB,EACvBC,YA3MQ,SAAC7B,GACjBrB,EAAWqB,EAAO8B,UA6Md,sBAAK9F,UAAU,SAAf,UACI,sEACA,gFAEJ,cAAC+F,EAAA,EAAD,CACIlH,KAAMA,EACNmH,iBAAkB,IAClB3F,QAAS,kBAAMvB,GAAQ,IACvB0D,QAASA,OCjUV,SAASyD,IACpB,MAAkCrH,mBAAS,IAA3C,mBAAOsH,EAAP,KAAkBC,EAAlB,KACA,EAA8BvH,mBAAS,IAAvC,mBAAO4D,EAAP,KAAgBC,EAAhB,KACA,EAAwB7D,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMsH,EAAiB,WACnBvD,MAAM,mDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIkD,EAAalD,MAC1BE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAGhCG,qBAAU,WACN6C,MACD,IAEH,IAwCMrC,EAAe,SAACC,IAlBD,SAAC3C,EAAU4C,GAC5BpB,MAAMoB,EAAK,CACPT,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUvC,KAExByB,MAAK,SAAAC,GACCA,EAASc,IACRuC,IACA3D,EAAW,uBACX3D,GAAQ,IAERgF,MAAM,oCAGbX,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAU5BiD,CANiB,CACbpF,SAAU+C,EAAOf,KAAKhC,SACtBD,KAAMgD,EAAOf,KAAKjC,KAClBE,SAAU8C,EAAOf,KAAK/B,SACtB5B,SAAU0E,EAAOf,KAAK3D,UAEH,oDAAoD0E,EAAOf,KAAKqD,KAGrFnC,EAAc,CAChB,eAAgB,cAGdC,EAAU,CACZ,CACIC,WAAY,GACZC,MAAO,KACPC,MAAO,GACPE,sBAAuB,SAAAT,GAAM,OAC7B,cAACjE,EAAA,EAAD,CACIE,QAAS,kBA7DGgE,EA6DkB,oDAAoDD,EAAOpE,MA5DjGyD,QAAQkD,IAAItC,QACTS,OAAOC,QAAQ,kBACd9B,MAAMoB,EAAK,CAACT,OAAQ,WACnBV,MAAK,SAAAC,GACCA,EAASc,IACRuC,IACA3D,EAAW,oEACX3D,GAAQ,IAORgF,MAAM,oCAGbX,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAlBb,IAACa,GA8DZ/D,KAAK,QACL0E,MAAM,QACNzG,MAAO,CACHE,WAAY,mDACZC,UAAW,wBACXuD,SAAU,OACVC,UAAW,OACXC,SAAU,OACVC,UAAW,OACXC,WAAY,OACZ4C,cAAe,aAZvB,gBAeAL,UAAWL,GAEf,CACIG,MAAO,WACPQ,UAAU,EACVG,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAKhC,SAAW+C,EAAOoB,SAC9BrB,EAAaC,KAiBrB,CACIM,MAAO,OACPQ,UAAU,EACVC,KAAM,MACNE,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPE,sBAAuB,SAAAT,GAAM,OACzB,IAAIwC,KAAKxC,EAAOpE,OAAO6G,sBAC3BjC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAKjC,KAAOgD,EAAOoB,SAC1BrB,EAAaC,KAGrB,CACIM,MAAO,WACPQ,UAAU,EACVG,QAAQ,EACRC,UAAU,EACVX,MAAO,IACPC,UAAWL,EACXgB,YAAa,SAAAnB,GACTA,EAAOf,KAAK/B,SAAW8C,EAAOoB,SAC9BrB,EAAaC,KAGrB,CACIK,WAAY,WACZC,MAAO,WACPQ,UAAU,EACVG,QAAQ,EACRV,MAAO,IACPE,sBAAuB,SAAAT,GAAM,OACzBA,EAAOpE,MAAMb,UAAU,IAAIiF,EAAOpE,MAAMZ,UAM5CwF,UAAWL,IAInB,OACI,eAAC,IAAMrE,SAAP,WACI,qBACIE,UAAU,uBACV7B,MAAO,CACHmH,OAAQ,IACRf,MAAO,OACP5D,OAAQ,OACRrC,UAAW,yBANnB,SASA,cAAC,cAAD,CACIiH,QAASW,EACTV,UAAW,GACXC,WAAYrB,EACZsB,YAAY,EACZC,mBAAoB,GACpBC,uBAAuB,MAG3B,qBAAK5F,UAAU,SAAf,SACI,uFAEJ,cAAC+F,EAAA,EAAD,CACIlH,KAAMA,EACNmH,iBAAkB,IAClB3F,QAAS,kBAAMvB,GAAQ,IACvB0D,QAASA,O,8BC/LV,SAASkE,IAWpB,IAVA,MAAkC9H,mBAAS,IAA3C,mBAAOsH,EAAP,KAAkBC,EAAlB,KACMQ,EAAkB,GASflF,EAAI,EAAGA,EAAIyE,EAAUxE,OAAQD,KAC/ByE,EAAUzE,GAAGnC,SAASP,WAAamH,EAAUzE,GAAGnC,SAASP,YACxD4H,EAAgBhF,KAAK,CAACiF,MAAOV,EAAUzE,GAAGT,KAAM6F,MAAOX,EAAUzE,GAAGR,SAAS,MAAMiF,EAAUzE,GAAGnC,SAASP,UAAU,IAAImH,EAAUzE,GAAGnC,SAASN,WAQrJ,OAJAuE,qBAAU,WAZNV,MAAM,mDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIkD,EAAalD,MAC1BE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAW7B,IAGC,cAAC,IAAMtD,SAAP,UACI,cAAC,IAAD,CACIgH,QAAS,CAAEC,IAAeC,KAC1BC,YAAY,eACZC,cAAe,CACXC,KAAM,kBACNC,OAAQ,QACRC,MAAO,yCAEXC,SAAS,mBACTC,OAAQZ,MC7BT,SAASa,IACpB,MAA0B5I,mBAAS,aAAnC,mBAAOgB,EAAP,KAAc6H,EAAd,KAMA,OACI,cAAC,IAAM3H,SAAP,UACA,cAAC4H,EAAA,EAAD,CACIC,GAAI,CACAC,SAAU,EACVC,QAAS,QAHjB,SAKI,eAACC,EAAA,EAAD,CAAYlI,MAAOA,EAAnB,UACI,eAACmI,EAAA,EAAD,CACI/H,UAAU,UACVU,SAdK,SAACjB,EAAOG,GACzB6H,EAAS7H,IAcGoI,YAAY,WACZ7J,MAAO,CAAEoG,MAAO,MAAO0D,aAAc,GACrCC,UAAU,UACVC,eAAe,UANnB,UAQA,cAACC,EAAA,EAAD,CACIpI,UAAU,QACVS,MAAM,YACNb,MAAM,YACNyI,KAAM,cAACC,EAAA,EAAD,IACNC,aAAa,QACbpK,MAAO,CACHE,WAAY,gEACZC,UAAW,wBACXF,aAAc,GACd6J,YAAa,KAGrB,cAACG,EAAA,EAAD,CACIpI,UAAU,QACVS,MAAM,YACNb,MAAM,YACNyI,KAAM,cAACG,EAAA,EAAD,IACND,aAAa,QACbpK,MAAO,CACHE,WAAY,gEACZC,UAAW,wBACXF,aAAc,GACd6J,YAAa,KAGrB,cAACG,EAAA,EAAD,CACIpI,UAAU,QACVS,MAAM,WACNb,MAAM,WACNyI,KAAM,cAACG,EAAA,EAAD,IACND,aAAa,QACbpK,MAAO,CACHE,WAAY,gEACZC,UAAW,wBACXF,aAAc,GACd6J,YAAa,QAIrB,cAACQ,EAAA,EAAD,CACI7I,MAAM,YACNzB,MAAO,CACHoG,MAAO,MACPmE,WAAY,GACZzG,WAAY,KACZgG,YAAa,MANrB,SASI,cAAC5F,EAAD,MAEJ,cAACoG,EAAA,EAAD,CACI7I,MAAM,YACNzB,MAAO,CACHoG,MAAO,MACPmE,WAAY,GACZzG,WAAY,KACZgG,YAAa,MANrB,SAQI,cAAChC,EAAD,MAEJ,cAACwC,EAAA,EAAD,CACI7I,MAAM,WACNzB,MAAO,CACHoG,MAAO,MACPmE,WAAY,GACZzG,WAAY,KACZgG,YAAa,MANrB,SAQI,cAACvB,EAAD,aCvFLiC,MATf,WACE,OACE,sBAAK3I,UAAU,MAAf,UACE,cAAChC,EAAD,IACA,cAAC,EAAD,QCIS4K,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhG,MAAK,YAAkD,IAA/CiG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f65e37b0.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from \"@mui/material\";\r\n\r\nexport default function Header() {\r\n    return (\r\n            <AppBar position=\"static\" \r\n                style={{ \r\n                    marginBottom: 25, \r\n                    background: 'linear-gradient(45deg, #000000 10%, #181D1F 90%, #222628 100%)',\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                }}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h5\">\r\n                        CRM Pro / Mr. Personal Trainer\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { Button, TextField, Dialog, \r\n    DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\n\r\nexport default function AddCustomer(props) {\r\n    const [open, setOpen] = useState(false);\r\n    const [customer, setCustomer] = useState({\r\n        firstname: '',\r\n        lastname: '',\r\n        streetaddress: '',\r\n        postcode: '',\r\n        city: '',\r\n        email: '',\r\n        phone: ''\r\n    });\r\n\r\n    const inputChanged = (event) => {\r\n        setCustomer({...customer, [event.target.name]: event.target.value})\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        props.addCustomer(customer);\r\n        handleClose();\r\n    };\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Button \r\n                className=\"hover\"\r\n                onClick={handleClickOpen}\r\n                size=\"medium\"\r\n                variant=\"outlined\" \r\n                style={{\r\n                    background: 'linear-gradient(45deg, #000000 1%, #181D1F 50%, #222628 100%)',\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                    marginBottom: 10,\r\n                    border: 0,\r\n                }}\r\n            >Add new customer</Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>New customer</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                label=\"Firstname\"\r\n                name=\"firstname\"\r\n                value={customer.firstname}\r\n                onChange={inputChanged}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                label=\"Lastname\"\r\n                name=\"lastname\"\r\n                value={customer.lastname}\r\n                onChange={inputChanged}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                label=\"Address\"\r\n                name=\"streetaddress\"\r\n                value={customer.streetaddress}\r\n                onChange={inputChanged}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                label=\"Postcode\"\r\n                name=\"postcode\"\r\n                value={customer.postcode}\r\n                onChange={inputChanged}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                label=\"City\"\r\n                name=\"city\"\r\n                value={customer.city}\r\n                onChange={inputChanged}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                value={customer.email}\r\n                onChange={inputChanged}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                />\r\n                <TextField\r\n                label=\"Phone\"\r\n                name=\"phone\"\r\n                value={customer.phone}\r\n                onChange={inputChanged}\r\n                variant=\"standard\"\r\n                margin=\"dense\"\r\n                fullWidth\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleSave}>Save</Button>\r\n                <Button onClick={handleClose}>Cancel</Button>\r\n            </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { MenuItem, Select, Button, TextField, Dialog, \r\n    DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\n\r\nexport default function AddTrainingForCustomer(props) {\r\n    const [open, setOpen] = useState(false);\r\n    const [training, setTraining ] = useState({\r\n        date: '',\r\n        activity: '',\r\n        duration: '',\r\n        customer: props.customer.links[1].href,\r\n    });\r\n    const [acitvity] = useState([\r\n        'Jogging',\r\n        'Sprints',\r\n        'Boxing',\r\n        'Cycling',\r\n        'Gym training',\r\n        'Balance training',\r\n        'Spinning',\r\n        'Zumba',\r\n    ]);\r\n    //MenuItemeille taulukko, jotta ne voidaan tulostaa return-lausekkeessa\r\n    const menuItems = [];\r\n    //for-loop MUin MenuItem komponentille, jotta vähennetään koodin määrää\r\n    for (let i = 0; i < acitvity.length; i++) {\r\n        menuItems.push(<MenuItem key={i} value={acitvity[i]}>{acitvity[i]}</MenuItem>);\r\n    }\r\n\r\n    const inputChanged = (event) => {\r\n        setTraining({...training, [event.target.name]: event.target.value});\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        props.addTrainingForCustomer(training);\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button \r\n                onClick={handleClickOpen}\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                style={{\r\n                    background: 'linear-gradient(45deg, #181D1F 30%, #222628 90%)',\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                    border: 0,\r\n                    minWidth: '20px',\r\n                    minHeight: '20px',\r\n                    maxWidth: '20px',\r\n                    maxHeight: '20px',\r\n                    marginLeft: '-8px',\r\n                }}\r\n            >\r\n                +\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>New training session for customer</DialogTitle>\r\n            <DialogContent>\r\n                <Select\r\n                    label=\"Activity\"\r\n                    name=\"activity\"\r\n                    value={training.activity}\r\n                    onChange={inputChanged}\r\n                    variant=\"standard\"\r\n                    margin=\"dense\"\r\n                    fullWidth\r\n                >\r\n                    {menuItems}\r\n                    {/* Nämä MenuItem komponentit voitaisiin luultavasti supistaa pienemmäksi koodiksi, \r\n                    jollain for-loopilla, jossa loopattaisiin luotu activity taulukko lävitse ja annettaisiin arvot\r\n                    valuelle ja näkyvälle tekstille? Samalla päästäisiin kovakoodaamisesta, kun luodaan uusi tieto \r\n                    taulukkoon tai poistetaan eli vähemmän työmäärää ja koodia */}\r\n                    {/*<MenuItem value={acitvity[0]}>{acitvity[0]}</MenuItem>\r\n                    <MenuItem value={acitvity[1]}>{acitvity[1]}</MenuItem>\r\n                    <MenuItem value={acitvity[2]}>{acitvity[2]}</MenuItem>\r\n                    <MenuItem value={acitvity[3]}>{acitvity[3]}</MenuItem>\r\n                    <MenuItem value={acitvity[4]}>{acitvity[4]}</MenuItem>\r\n                    <MenuItem value={acitvity[5]}>{acitvity[5]}</MenuItem>\r\n                    <MenuItem value={acitvity[6]}>{acitvity[6]}</MenuItem>\r\n                    <MenuItem value={acitvity[7]}>{acitvity[7]}</MenuItem>*/}\r\n                </Select>\r\n                <TextField\r\n                    name=\"date\"\r\n                    value={training.date}\r\n                    type=\"datetime-local\"\r\n                    onChange={inputChanged}\r\n                    variant=\"standard\"\r\n                    margin=\"dense\"\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    label=\"Duration (minutes)\"\r\n                    name=\"duration\"\r\n                    value={training.duration}\r\n                    onChange={inputChanged}\r\n                    variant=\"standard\"\r\n                    margin=\"dense\"\r\n                    fullWidth\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleSave}>Save</Button>\r\n                <Button onClick={handleClose}>Cancel</Button>\r\n            </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react/lib/agGridReact';\r\nimport { Button, Snackbar } from '@mui/material';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css';\r\nimport AddCustomer from './AddCustomer';\r\nimport AddTrainingForCustomer from './AddTrainingForCustomer';\r\n//import EditCustomer from './EditCustomer';\r\n\r\nexport default function Customers() {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [gridApi, setGridApi] = useState(null);\r\n\r\n    const fetchCustomers = () => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers')\r\n        .then(response => response.json())\r\n        .then(data => setCustomers(data.content))\r\n        .catch(err => console.error(err))\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCustomers();\r\n    }, []);\r\n\r\n    const addCustomer = (customer) => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers', {\r\n            method: 'POST',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(customer)\r\n        })\r\n        .then(response => {\r\n            if(response.ok) {\r\n                fetchCustomers();\r\n                setMessage('Customer has beed added successfully');\r\n                setOpen(true);\r\n            } else {\r\n                alert('Something went terrible wrong, HALP!');\r\n            }\r\n        })\r\n        .catch(err => console.error(err))\r\n    };\r\n\r\n    const addTrainingForCustomer = (training) => {\r\n        fetch('https://customerrest.herokuapp.com/api/trainings', {\r\n            method: 'POST',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(training)\r\n        })\r\n        .then(response => {\r\n            if(response.ok) {\r\n                setMessage('Training for customer has beed added successfully');\r\n                setOpen(true);\r\n            } else {\r\n                alert('Something went terrible wrong, HALP!');\r\n            }\r\n        })\r\n        .catch(err => console.error(err))\r\n    };\r\n\r\n    const editCustomer = (customer, url) => {\r\n        fetch(url, {\r\n            method: 'PUT',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(customer)\r\n        })\r\n        .then(response => {\r\n            if(response.ok) {\r\n                fetchCustomers();\r\n                setMessage('Edit was successful');\r\n                setOpen(true);\r\n            } else {\r\n                alert('Something went terrible wrong');\r\n            }\r\n        })\r\n        .catch(err => console.error(err))\r\n    };\r\n\r\n    const deleteCustomer = (url) => {\r\n        if(window.confirm('Are you sure?')) {\r\n            fetch(url, {method: 'DELETE'})\r\n            .then(response => {\r\n                if(response.ok) {\r\n                    fetchCustomers();\r\n                    setMessage('Car has been deleted successfully');\r\n                    setOpen(true);\r\n                } else {\r\n                    //Onko tämä edes tarpeellinen else?\r\n                    //Kun tätä ei käytetä mihinkään vai \r\n                    //onko tämä sitä varten, että tiedon \r\n                    //käsittelyssä tapahtuu virhe tai tieto katoaa?\r\n                    //Esim. joku kerinnyt poistaa tiedon ennen sinua?\r\n                    alert('Something went terrible wrong')\r\n                }\r\n            })\r\n            .catch(err => console.error(err))\r\n        }\r\n    };\r\n\r\n    const editWithCell = (params) => {\r\n        const customer = {\r\n            firstname: params.data.firstname,\r\n            lastname: params.data.lastname,\r\n            streetaddress: params.data.streetaddress,\r\n            postcode: params.data.postcode,\r\n            city: params.data.city,\r\n            email: params.data.email,\r\n            phone: params.data.phone,\r\n        };\r\n        editCustomer(customer, params.data.links[1].href);\r\n    };\r\n\r\n    const onGridReady = (params) => {\r\n        setGridApi(params.api);\r\n    };\r\n\r\n    const exportCVS = () => {\r\n        gridApi.exportDataAsCsv();\r\n    };\r\n\r\n    const columnStyle = {\r\n        'border-right': '1px dotted',\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            headerName: '',\r\n            field: 'links.1.href',\r\n            width: 40,\r\n            cellStyle: columnStyle,\r\n            cellRendererFramework: params => \r\n            <AddTrainingForCustomer \r\n                addTrainingForCustomer={addTrainingForCustomer} \r\n                customer={params.data}>\r\n            </AddTrainingForCustomer>\r\n        },\r\n        //EditCustomer komponentti jäi ylimääräiseksi, koska sain toimimaan editoinnin suoraan Ag-Gridillä ja sen tallentumaan myös RESTApiin/kantaan\r\n        //{\r\n        //    headerName: '',\r\n        //    field: 'links.1.href',\r\n        //    width: 100,\r\n        //    cellStyle: columnStyle,\r\n        //    cellRendererFramework: params => \r\n        //    <EditCustomer \r\n        //        \r\n        //        editCustomer={editCustomer} \r\n        //        customer={params.data}>\r\n        //    </EditCustomer>\r\n        //},\r\n        {\r\n            headerName: '',\r\n            field: 'links.1.href',\r\n            width: 40,\r\n            cellStyle: columnStyle,\r\n            cellRendererFramework: params => \r\n            <Button\r\n                onClick={() => deleteCustomer(params.value)}\r\n                size='small'\r\n                color='error'\r\n                style={{\r\n                    background: 'linear-gradient(45deg, #181D1F 30%, #222628 90%)',\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                    minWidth: '20px',\r\n                    minHeight: '20px',\r\n                    maxWidth: '20px',\r\n                    maxHeight: '20px',\r\n                    marginLeft: '-8px',\r\n                    textTransform: 'lowercase',\r\n                }}\r\n            >x</Button>\r\n        },\r\n        {\r\n            field: 'firstname',\r\n            sortable: true,\r\n            sort: 'asc',\r\n            sortIndex: 1,\r\n            filter: true,\r\n            editable: true,\r\n            width: 250,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.firstname = params.newValue;\r\n                editWithCell(params);\r\n            }, \r\n            //Oivallus: voi käyttää ValueGetteriä tai field tietuetta, että tieto saadaan taulukkoon.\r\n            //valueGetter: params => params.data.firstname,\r\n            //valueSetterillä tallennetaan ag-grid kentässä editoitu tieto kantaan/restapiin, jotta ei tarvita erillistä editkomponenttia käyttää customerin editoinnissa\r\n            //alapuolella on vanha valueSetter toiminto, johon tein muuttujan const:lla, jotta vähennetään toistuvaa koodia ja saadaan toimivampaa/tehokkampaa koodia eli säästetään serverin yms. tehoja muuhun kuormitukseen\r\n            //tälläiset valueSetterit oli siis jokaisen columnin kohdalla eli koodi supistui editWithCell muuttujalla paljon\r\n            //valueSetter: params => {\r\n            //    params.data.firstname = params.newValue; \r\n            //    const customer = {\r\n            //        firstname: params.data.firstname,\r\n            //        lastname: params.data.lastname,\r\n            //        streetaddress: params.data.streetaddress,\r\n            //        postcode: params.data.postcode,\r\n            //        city: params.data.city,\r\n            //        email: params.data.email,\r\n            //        phone: params.data.phone,\r\n            //    };\r\n                //näitä consol.logeja käytetty selvittämään meneekö tietueen muodostus ja talennus oikein, sekä heataanko tietoa oikein/tuleeko mitään tietoa\r\n                //console.log(customer);\r\n                //console.log(params.data.links[1].href);\r\n            //    editCustomer(customer, params.data.links[1].href);\r\n            //},\r\n        },\r\n        {\r\n            field: 'lastname',\r\n            sortable: true,\r\n            sort: 'asc',\r\n            sortIndex: 0,\r\n            filter: true,\r\n            editable: true,\r\n            width: 250,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.lastname = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n        {\r\n            field: 'phone',\r\n            sortable: true,\r\n            filter: true,\r\n            editable: true,\r\n            width: 150,\r\n            cellRendererFramework: params => \r\n            '+'+params.value,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.phone = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n        {\r\n            field: 'email',\r\n            sortable: true,\r\n            filter: true,\r\n            editable: true,\r\n            width: 300,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.email = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n        {\r\n            field: 'streetaddress',\r\n            sortable: true,\r\n            filter: true,\r\n            editable: true,\r\n            width: 258,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.streetaddress = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n        {\r\n            field: 'postcode',\r\n            sortable: true,\r\n            filter: true,\r\n            editable: true,\r\n            width: 120,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.postcode = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n        {\r\n            field: 'city',\r\n            sortable: true,\r\n            filter: true,\r\n            editable: true,\r\n            width: 230,\r\n            valueSetter: params => {\r\n                params.data.city = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n    ];\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <AddCustomer addCustomer={addCustomer}/>\r\n            <Button \r\n                className=\"hover\"\r\n                onClick={() => exportCVS()}\r\n                size=\"medium\"\r\n                variant=\"outlined\" \r\n                style={{\r\n                    background: 'linear-gradient(45deg, #000000 1%, #181D1F 50%, #222628 100%)',\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                    marginBottom: 10,\r\n                    border: 0,\r\n                    marginLeft: 10,\r\n                }}\r\n            >Export as CVS file</Button>\r\n            <div\r\n                className='ag-theme-alpine-dark'\r\n                style={{ \r\n                    height: 560, \r\n                    width: \"100%\", \r\n                    margin: \"auto\",\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                }}\r\n            >\r\n            <AgGridReact\r\n                rowData={customers}\r\n                rowHeight={46}\r\n                columnDefs={columns}\r\n                pagination={true}\r\n                paginationPageSize={10}\r\n                suppressCellSelection={true}\r\n                onGridReady={onGridReady}\r\n            />\r\n            </div>\r\n            <div className=\"inline\">\r\n                <p>+ = Add training session for customer</p>\r\n                <p>x = Delete row / Delete customer information</p>\r\n            </div>\r\n            <Snackbar\r\n                open={open}\r\n                autoHideDuration={3000}\r\n                onClose={() => setOpen(false)}\r\n                message={message}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react/lib/agGridReact';\r\nimport { Button, Snackbar } from '@mui/material';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css';\r\n\r\nexport default function Trainings() {\r\n    const [trainings, setTrainings] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const fetchTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then(response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTrainings();\r\n    }, []);\r\n\r\n    const deleteTraining = (url) => {\r\n        console.log(url);\r\n        if(window.confirm('Are you sure?')) {\r\n            fetch(url, {method: 'DELETE'})\r\n            .then(response => {\r\n                if(response.ok) {\r\n                    fetchTrainings();\r\n                    setMessage('Training session has been deleted successfully from the customer');\r\n                    setOpen(true);\r\n                } else {\r\n                    //Onko tämä edes tarpeellinen else?\r\n                    //Kun tätä ei käytetä mihinkään vai \r\n                    //onko tämä sitä varten, että tiedon \r\n                    //käsittelyssä tapahtuu virhe tai tieto katoaa?\r\n                    //Esim. joku kerinnyt poistaa tiedon ennen sinua?\r\n                    alert('Something went terrible wrong')\r\n                }\r\n            })\r\n            .catch(err => console.error(err))\r\n        }\r\n    };\r\n\r\n    const editTraining = (training, url) => {\r\n        fetch(url, {\r\n            method: 'PUT',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(training)\r\n        })\r\n        .then(response => {\r\n            if(response.ok) {\r\n                fetchTrainings();\r\n                setMessage('Edit was successful');\r\n                setOpen(true);\r\n            } else {\r\n                alert('Something went terrible wrong');\r\n            }\r\n        })\r\n        .catch(err => console.error(err))\r\n    };\r\n\r\n    const editWithCell = (params) => {\r\n        const training = {\r\n            activity: params.data.activity,\r\n            date: params.data.date,\r\n            duration: params.data.duration,\r\n            customer: params.data.customer,\r\n        };\r\n        editTraining(training, 'https://customerrest.herokuapp.com/api/trainings/'+params.data.id);\r\n    };\r\n\r\n    const columnStyle = {\r\n        'border-right': '1px dotted',\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            headerName: '',\r\n            field: 'id',\r\n            width: 40,\r\n            cellRendererFramework: params => \r\n            <Button\r\n                onClick={() => deleteTraining('https://customerrest.herokuapp.com/api/trainings/'+params.value)}\r\n                size='small'\r\n                color='error'\r\n                style={{\r\n                    background: 'linear-gradient(45deg, #181D1F 30%, #222628 90%)',\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                    minWidth: '20px',\r\n                    minHeight: '20px',\r\n                    maxWidth: '20px',\r\n                    maxHeight: '20px',\r\n                    marginLeft: '-8px',\r\n                    textTransform: 'lowercase',\r\n                }}\r\n            >x</Button>,\r\n            cellStyle: columnStyle,\r\n        },\r\n        {\r\n            field: 'activity',\r\n            sortable: true,\r\n            filter: true,\r\n            editable: true,\r\n            width: 250,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.activity = params.newValue;\r\n                editWithCell(params);\r\n            },\r\n            //tein myös muokkauksen trainings osioon, vaikka sitä ei vaadittu\r\n            //valueSetter: params => {\r\n            //    params.data.activity = params.newValue; \r\n            //    const training = {\r\n            //        activity: params.data.activity,\r\n            //        date: params.data.date,\r\n            //        duration: params.data.duration,\r\n            //        customer: params.data.customer,\r\n            //    };\r\n                //näitä consol.logeja käytetty selvittämään meneekö tietueen muodostus ja talennus oikein, sekä heataanko tietoa oikein/tuleeko mitään tietoa\r\n                //console.log(training);\r\n                //console.log('https://customerrest.herokuapp.com/api/trainings/'+params.data.id);\r\n            //    editTraining(training, 'https://customerrest.herokuapp.com/api/trainings/'+params.data.id);\r\n            //},\r\n        },\r\n        {\r\n            field: 'date',\r\n            sortable: true,\r\n            sort: 'asc',\r\n            filter: true,\r\n            editable: true,\r\n            width: 150,\r\n            cellRendererFramework: params => \r\n                new Date(params.value).toLocaleDateString(),\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.date = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n        {\r\n            field: 'duration',\r\n            sortable: true,\r\n            filter: true,\r\n            editable: true,\r\n            width: 120,\r\n            cellStyle: columnStyle,\r\n            valueSetter: params => {\r\n                params.data.duration = params.newValue; \r\n                editWithCell(params);\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Customer',\r\n            field: 'customer',\r\n            sortable: true,\r\n            filter: true,\r\n            width: 325,\r\n            cellRendererFramework: params => \r\n                params.value.firstname+' '+params.value.lastname,\r\n            //toinen ratkaisu\r\n            //cellRendererFramework: function(params) {\r\n            //    return params.value.firstname+' '+params.value.lastname;\r\n            //},\r\n            //kolmas vaihtoehto on laittaa parametrit MUin komponentin value kenttän kautta\r\n            cellStyle: columnStyle,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n                className='ag-theme-alpine-dark'\r\n                style={{ \r\n                    height: 560, \r\n                    width: '100%', \r\n                    margin: 'auto',\r\n                    boxShadow: '0 3px 5px 2px #000000',\r\n                }}\r\n            >\r\n            <AgGridReact\r\n                rowData={trainings}\r\n                rowHeight={46}\r\n                columnDefs={columns}\r\n                pagination={true}\r\n                paginationPageSize={10}\r\n                suppressCellSelection={true}\r\n            />\r\n            </div>\r\n            <div className=\"inline\">\r\n                <p>x = Delete row / Delete training session of customer</p>\r\n            </div>\r\n            <Snackbar\r\n                open={open}\r\n                autoHideDuration={3000}\r\n                onClose={() => setOpen(false)}\r\n                message={message}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\n\r\nexport default function Calendar() {\r\n    const [trainings, setTrainings] = useState([]);\r\n    const trainingsCustom = [];\r\n    \r\n    const fetchTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then(response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    };\r\n\r\n    for (let i = 0; i < trainings.length; i++) {\r\n        if(trainings[i].customer.firstname || trainings[i].customer.firstname) {\r\n            trainingsCustom.push({start: trainings[i].date, title: trainings[i].activity+' / '+trainings[i].customer.firstname+' '+trainings[i].customer.lastname});\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchTrainings();\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <FullCalendar\r\n                plugins={[ dayGridPlugin, timeGridPlugin ]}\r\n                initialView=\"dayGridMonth\"\r\n                headerToolbar={{\r\n                    left: 'prev,next today',\r\n                    center: 'title',\r\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                }}\r\n                timeZone=\"America/New_York\"\r\n                events={trainingsCustom}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Box, Tab } from '@mui/material';\r\nimport { TabContext, TabList, TabPanel } from '@mui/lab';\r\nimport { FitnessCenter, Group } from '@mui/icons-material';\r\nimport Customers from './Customers';\r\nimport Trainings from './Trainings';\r\nimport Calendar from './Calendar';\r\n\r\nexport default function Navigation() {\r\n    const [value, setValue] = useState(\"customers\");\r\n\r\n    const handleChange = (event, value) => {\r\n        setValue(value);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Box \r\n            sx={{ \r\n                flexGrow: 1, \r\n                display: 'flex' \r\n            }}>\r\n            <TabContext value={value}>\r\n                <TabList\r\n                    className=\"tablist\"\r\n                    onChange={handleChange} \r\n                    orientation=\"vertical\" \r\n                    style={{ width: \"13%\", marginRight: -5 }}\r\n                    textColor=\"primary\"\r\n                    indicatorColor=\"primary\"\r\n                >\r\n                <Tab \r\n                    className=\"hover\"\r\n                    label=\"Customers\"\r\n                    value=\"customers\" \r\n                    icon={<Group/>}\r\n                    iconPosition=\"start\"\r\n                    style={{ \r\n                        background: 'linear-gradient(45deg, #000000 1%, #181D1F 50%, #222628 100%)',\r\n                        boxShadow: '0 3px 5px 2px #000000',\r\n                        marginBottom: 10,\r\n                        marginRight: 5,\r\n                    }}         \r\n                />\r\n                <Tab \r\n                    className=\"hover\"\r\n                    label=\"Trainings\" \r\n                    value=\"trainings\"\r\n                    icon={<FitnessCenter/>}\r\n                    iconPosition=\"start\"\r\n                    style={{ \r\n                        background: 'linear-gradient(45deg, #000000 1%, #181D1F 50%, #222628 100%)',\r\n                        boxShadow: '0 3px 5px 2px #000000',\r\n                        marginBottom: 10,\r\n                        marginRight: 5,\r\n                    }}\r\n                />\r\n                <Tab \r\n                    className=\"hover\"\r\n                    label=\"Calendar\" \r\n                    value=\"calendar\"\r\n                    icon={<FitnessCenter/>}\r\n                    iconPosition=\"start\"\r\n                    style={{ \r\n                        background: 'linear-gradient(45deg, #000000 1%, #181D1F 50%, #222628 100%)',\r\n                        boxShadow: '0 3px 5px 2px #000000',\r\n                        marginBottom: 10,\r\n                        marginRight: 5,\r\n                    }}\r\n                />\r\n                </TabList>\r\n                <TabPanel \r\n                    value=\"customers\" \r\n                    style={{ \r\n                        width: \"90%\", \r\n                        marginTop: -25, \r\n                        marginLeft: \"0%\", \r\n                        marginRight: \"0%\" \r\n                    }}\r\n                >\r\n                    <Customers/>\r\n                </TabPanel>\r\n                <TabPanel \r\n                    value=\"trainings\" \r\n                    style={{ \r\n                        width: \"90%\", \r\n                        marginTop: -25, \r\n                        marginLeft: \"0%\", \r\n                        marginRight: \"0%\" \r\n                    }}>\r\n                    <Trainings/>\r\n                </TabPanel>\r\n                <TabPanel \r\n                    value=\"calendar\" \r\n                    style={{ \r\n                        width: \"90%\", \r\n                        marginTop: -25, \r\n                        marginLeft: \"0%\", \r\n                        marginRight: \"0%\" \r\n                    }}>\r\n                    <Calendar/>\r\n                </TabPanel>\r\n                {/* Oivallus: Asettamalla 2 tai useamman TabPaneelin value samaksi kuin TabListin Tabin value. \r\n                Voidaan sijoittaa 2 tai useampi TabPanel yhdelle sivulle. Parempi/oikea tapa on kuitenkin sijoittaa \r\n                TabPanel tagien sisään 2 tai useampi eri komponentti, jos haluaa ne samalle sivulle.*/}\r\n            </TabContext>\r\n        </Box>\r\n        </React.Fragment>\r\n    );\r\n}","import './App.css';\nimport Header from './components/Header';\nimport Menu from './components/Navigation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Menu/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}